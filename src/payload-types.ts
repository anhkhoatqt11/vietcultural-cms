/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
    user: UserAuthOperations1;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    achievements: Achievement;
    'after-question-info': AfterQuestionInfo;
    comments: Comment;
    'email-verifications': EmailVerification;
    'information-slides': InformationSlide;
    'media-links': MediaLink;
    'password-resets': PasswordReset;
    posts: Post;
    'puzzle-games': PuzzleGame;
    'puzzle-pieces': PuzzlePiece;
    'quiz-games': QuizGame;
    'quiz-game-questions': QuizGameQuestion;
    'refresh-tokens': RefreshToken;
    regions: Region;
    tags: Tag;
    'treasure-cards': TreasureCard;
    'treasure-games': TreasureGame;
    'word-games': WordGame;
    'comment-reactions': CommentReaction;
    'game-types': GameType;
    user: User1;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    achievements: AchievementsSelect<false> | AchievementsSelect<true>;
    'after-question-info': AfterQuestionInfoSelect<false> | AfterQuestionInfoSelect<true>;
    comments: CommentsSelect<false> | CommentsSelect<true>;
    'email-verifications': EmailVerificationsSelect<false> | EmailVerificationsSelect<true>;
    'information-slides': InformationSlidesSelect<false> | InformationSlidesSelect<true>;
    'media-links': MediaLinksSelect<false> | MediaLinksSelect<true>;
    'password-resets': PasswordResetsSelect<false> | PasswordResetsSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    'puzzle-games': PuzzleGamesSelect<false> | PuzzleGamesSelect<true>;
    'puzzle-pieces': PuzzlePiecesSelect<false> | PuzzlePiecesSelect<true>;
    'quiz-games': QuizGamesSelect<false> | QuizGamesSelect<true>;
    'quiz-game-questions': QuizGameQuestionsSelect<false> | QuizGameQuestionsSelect<true>;
    'refresh-tokens': RefreshTokensSelect<false> | RefreshTokensSelect<true>;
    regions: RegionsSelect<false> | RegionsSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    'treasure-cards': TreasureCardsSelect<false> | TreasureCardsSelect<true>;
    'treasure-games': TreasureGamesSelect<false> | TreasureGamesSelect<true>;
    'word-games': WordGamesSelect<false> | WordGamesSelect<true>;
    'comment-reactions': CommentReactionsSelect<false> | CommentReactionsSelect<true>;
    'game-types': GameTypesSelect<false> | GameTypesSelect<true>;
    user: UserSelect<false> | UserSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user:
    | (User & {
        collection: 'users';
      })
    | (User1 & {
        collection: 'user';
      });
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface UserAuthOperations1 {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "achievements".
 */
export interface Achievement {
  id: number;
  userId: number | User1;
  name: string;
  description: string;
  stars: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user".
 */
export interface User1 {
  id: number;
  full_name: string;
  username?: string | null;
  password: string | null;
  avatarUrl?: string | null;
  dateOfBirth?: string | null;
  location?: string | null;
  gender?: ('Male' | 'Female' | 'Other') | null;
  isVerified?: boolean | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "after-question-info".
 */
export interface AfterQuestionInfo {
  id: number;
  topicName: string;
  puzzleGameId?: (number | null) | PuzzleGame;
  quizGameId?: (number | null) | QuizGame;
  treasureGameId?: (number | null) | TreasureGame;
  wordGameId?: (number | null) | WordGame;
  gameTypeId?: (number | null) | GameType;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "puzzle-games".
 */
export interface PuzzleGame {
  id: number;
  regionid?: (number | null) | Region;
  gametype?: (number | null) | GameType;
  imageurl?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "regions".
 */
export interface Region {
  id: number;
  regionName: string;
  regionCode: string;
  mediaUrl?: string | null;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "game-types".
 */
export interface GameType {
  id: number;
  code: 'puzzle' | 'quiz' | 'word' | 'treasure';
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quiz-games".
 */
export interface QuizGame {
  id: number;
  regionid?: (number | null) | Region;
  gametype?: (number | null) | GameType;
  title?: string | null;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "treasure-games".
 */
export interface TreasureGame {
  id: number;
  region?: (number | null) | Region;
  gametype?: (number | null) | GameType;
  title?: string | null;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "word-games".
 */
export interface WordGame {
  id: number;
  region?: (number | null) | Region;
  gametype?: (number | null) | GameType;
  question: string;
  hint?: string | null;
  answer: string;
  correctLetters?:
    | {
        letter?: string | null;
        id?: string | null;
      }[]
    | null;
  letters?:
    | {
        letter?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments".
 */
export interface Comment {
  id: number;
  postId?: (number | null) | Post;
  userId?: (number | null) | User1;
  content?: string | null;
  likes?: number | null;
  dislikes?: number | null;
  parentId?: (number | null) | Comment;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  userId?: (number | null) | User1;
  title?: string | null;
  question?: string | null;
  media?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  tags?: (number | Tag)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: number;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "email-verifications".
 */
export interface EmailVerification {
  id: number;
  userId?: (number | null) | User1;
  otp?: string | null;
  expiresAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "information-slides".
 */
export interface InformationSlide {
  id: number;
  heading?: string | null;
  content?:
    | {
        paragraph?: string | null;
        id?: string | null;
      }[]
    | null;
  afterQuestionInfoId?: (number | null) | AfterQuestionInfo;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media-links".
 */
export interface MediaLink {
  id: number;
  src?:
    | {
        url?: string | null;
        id?: string | null;
      }[]
    | null;
  alt?: string | null;
  afterQuestionInfoId?: (number | null) | AfterQuestionInfo;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "password-resets".
 */
export interface PasswordReset {
  id: number;
  userId: number | User1;
  token: string;
  expiresAt: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "puzzle-pieces".
 */
export interface PuzzlePiece {
  id: number;
  puzzleid?: (number | null) | PuzzleGame;
  piece_index?: number | null;
  x_position?: number | null;
  y_position?: number | null;
  correct_x?: number | null;
  correct_y?: number | null;
  image_piece_url?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quiz-game-questions".
 */
export interface QuizGameQuestion {
  id: number;
  quiz_game_id?: (number | null) | QuizGame;
  question?: string | null;
  optionA?: string | null;
  optionB?: string | null;
  optionC?: string | null;
  optionD?: string | null;
  audioUrl?: string | null;
  correctAnswer?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "refresh-tokens".
 */
export interface RefreshToken {
  id: number;
  userId: number | User1;
  hashedToken: string;
  revoked?: boolean | null;
  createdAt: string;
  updatedAt: string;
  expireAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "treasure-cards".
 */
export interface TreasureCard {
  id: number;
  treasureGame: number | TreasureGame;
  type: 'text' | 'image';
  value: string;
  matchGroup: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comment-reactions".
 */
export interface CommentReaction {
  id: number;
  user: number | User1;
  comment: number | Comment;
  reactionType: 'Like' | 'Dislike';
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'achievements';
        value: number | Achievement;
      } | null)
    | ({
        relationTo: 'after-question-info';
        value: number | AfterQuestionInfo;
      } | null)
    | ({
        relationTo: 'comments';
        value: number | Comment;
      } | null)
    | ({
        relationTo: 'email-verifications';
        value: number | EmailVerification;
      } | null)
    | ({
        relationTo: 'information-slides';
        value: number | InformationSlide;
      } | null)
    | ({
        relationTo: 'media-links';
        value: number | MediaLink;
      } | null)
    | ({
        relationTo: 'password-resets';
        value: number | PasswordReset;
      } | null)
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'puzzle-games';
        value: number | PuzzleGame;
      } | null)
    | ({
        relationTo: 'puzzle-pieces';
        value: number | PuzzlePiece;
      } | null)
    | ({
        relationTo: 'quiz-games';
        value: number | QuizGame;
      } | null)
    | ({
        relationTo: 'quiz-game-questions';
        value: number | QuizGameQuestion;
      } | null)
    | ({
        relationTo: 'refresh-tokens';
        value: number | RefreshToken;
      } | null)
    | ({
        relationTo: 'regions';
        value: number | Region;
      } | null)
    | ({
        relationTo: 'tags';
        value: number | Tag;
      } | null)
    | ({
        relationTo: 'treasure-cards';
        value: number | TreasureCard;
      } | null)
    | ({
        relationTo: 'treasure-games';
        value: number | TreasureGame;
      } | null)
    | ({
        relationTo: 'word-games';
        value: number | WordGame;
      } | null)
    | ({
        relationTo: 'comment-reactions';
        value: number | CommentReaction;
      } | null)
    | ({
        relationTo: 'game-types';
        value: number | GameType;
      } | null)
    | ({
        relationTo: 'user';
        value: number | User1;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'users';
        value: number | User;
      }
    | {
        relationTo: 'user';
        value: number | User1;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user:
    | {
        relationTo: 'users';
        value: number | User;
      }
    | {
        relationTo: 'user';
        value: number | User1;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "achievements_select".
 */
export interface AchievementsSelect<T extends boolean = true> {
  userId?: T;
  name?: T;
  description?: T;
  stars?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "after-question-info_select".
 */
export interface AfterQuestionInfoSelect<T extends boolean = true> {
  topicName?: T;
  puzzleGameId?: T;
  quizGameId?: T;
  treasureGameId?: T;
  wordGameId?: T;
  gameTypeId?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments_select".
 */
export interface CommentsSelect<T extends boolean = true> {
  postId?: T;
  userId?: T;
  content?: T;
  likes?: T;
  dislikes?: T;
  parentId?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "email-verifications_select".
 */
export interface EmailVerificationsSelect<T extends boolean = true> {
  userId?: T;
  otp?: T;
  expiresAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "information-slides_select".
 */
export interface InformationSlidesSelect<T extends boolean = true> {
  heading?: T;
  content?:
    | T
    | {
        paragraph?: T;
        id?: T;
      };
  afterQuestionInfoId?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media-links_select".
 */
export interface MediaLinksSelect<T extends boolean = true> {
  src?:
    | T
    | {
        url?: T;
        id?: T;
      };
  alt?: T;
  afterQuestionInfoId?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "password-resets_select".
 */
export interface PasswordResetsSelect<T extends boolean = true> {
  userId?: T;
  token?: T;
  expiresAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  userId?: T;
  title?: T;
  question?: T;
  media?: T;
  tags?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "puzzle-games_select".
 */
export interface PuzzleGamesSelect<T extends boolean = true> {
  regionid?: T;
  gametype?: T;
  imageurl?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "puzzle-pieces_select".
 */
export interface PuzzlePiecesSelect<T extends boolean = true> {
  puzzleid?: T;
  piece_index?: T;
  x_position?: T;
  y_position?: T;
  correct_x?: T;
  correct_y?: T;
  image_piece_url?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quiz-games_select".
 */
export interface QuizGamesSelect<T extends boolean = true> {
  regionid?: T;
  gametype?: T;
  title?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quiz-game-questions_select".
 */
export interface QuizGameQuestionsSelect<T extends boolean = true> {
  quiz_game_id?: T;
  question?: T;
  optionA?: T;
  optionB?: T;
  optionC?: T;
  optionD?: T;
  audioUrl?: T;
  correctAnswer?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "refresh-tokens_select".
 */
export interface RefreshTokensSelect<T extends boolean = true> {
  userId?: T;
  hashedToken?: T;
  revoked?: T;
  createdAt?: T;
  updatedAt?: T;
  expireAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "regions_select".
 */
export interface RegionsSelect<T extends boolean = true> {
  regionName?: T;
  regionCode?: T;
  mediaUrl?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "treasure-cards_select".
 */
export interface TreasureCardsSelect<T extends boolean = true> {
  treasureGame?: T;
  type?: T;
  value?: T;
  matchGroup?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "treasure-games_select".
 */
export interface TreasureGamesSelect<T extends boolean = true> {
  region?: T;
  gametype?: T;
  title?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "word-games_select".
 */
export interface WordGamesSelect<T extends boolean = true> {
  region?: T;
  gametype?: T;
  question?: T;
  hint?: T;
  answer?: T;
  correctLetters?:
    | T
    | {
        letter?: T;
        id?: T;
      };
  letters?:
    | T
    | {
        letter?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comment-reactions_select".
 */
export interface CommentReactionsSelect<T extends boolean = true> {
  user?: T;
  comment?: T;
  reactionType?: T;
  createdAt?: T;
  updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "game-types_select".
 */
export interface GameTypesSelect<T extends boolean = true> {
  code?: T;
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_select".
 */
export interface UserSelect<T extends boolean = true> {
  full_name?: T;
  username?: T;
  password?: T;
  avatarUrl?: T;
  dateOfBirth?: T;
  location?: T;
  gender?: T;
  isVerified?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}