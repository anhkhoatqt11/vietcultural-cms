/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  timestamp,
  varchar,
  numeric,
  integer,
  type AnyPgColumn,
  jsonb,
  boolean,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_treasure_cards_type = pgEnum('enum_treasure_cards_type', ['text', 'image'])
export const enum_comment_reactions_reaction_type = pgEnum('enum_comment_reactions_reaction_type', [
  'Like',
  'Dislike',
])
export const enum_game_types_code = pgEnum('enum_game_types_code', [
  'puzzle',
  'quiz',
  'word',
  'treasure',
])
export const enum_user_gender = pgEnum('enum_user_gender', ['Male', 'Female', 'Other'])

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
  }),
)

export const achievements = pgTable(
  'achievements',
  {
    id: serial('id').primaryKey(),
    userId: integer('user_id_id')
      .notNull()
      .references(() => user.id, {
        onDelete: 'set null',
      }),
    name: varchar('name').notNull(),
    description: varchar('description').notNull(),
    stars: numeric('stars').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    achievements_user_id_idx: index('achievements_user_id_idx').on(columns.userId),
    achievements_updated_at_idx: index('achievements_updated_at_idx').on(columns.updatedAt),
    achievements_created_at_idx: index('achievements_created_at_idx').on(columns.createdAt),
  }),
)

export const after_question_info = pgTable(
  'after_question_info',
  {
    id: serial('id').primaryKey(),
    topicName: varchar('topic_name').notNull(),
    puzzleGameId: integer('puzzle_game_id_id').references(() => puzzle_games.id, {
      onDelete: 'set null',
    }),
    quizGameId: integer('quiz_game_id_id').references(() => quiz_games.id, {
      onDelete: 'set null',
    }),
    treasureGameId: integer('treasure_game_id_id').references(() => treasure_games.id, {
      onDelete: 'set null',
    }),
    wordGameId: integer('word_game_id_id').references(() => word_games.id, {
      onDelete: 'set null',
    }),
    gameTypeId: integer('game_type_id_id').references(() => game_types.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    after_question_info_puzzle_game_id_idx: index('after_question_info_puzzle_game_id_idx').on(
      columns.puzzleGameId,
    ),
    after_question_info_quiz_game_id_idx: index('after_question_info_quiz_game_id_idx').on(
      columns.quizGameId,
    ),
    after_question_info_treasure_game_id_idx: index('after_question_info_treasure_game_id_idx').on(
      columns.treasureGameId,
    ),
    after_question_info_word_game_id_idx: index('after_question_info_word_game_id_idx').on(
      columns.wordGameId,
    ),
    after_question_info_game_type_id_idx: index('after_question_info_game_type_id_idx').on(
      columns.gameTypeId,
    ),
    after_question_info_updated_at_idx: index('after_question_info_updated_at_idx').on(
      columns.updatedAt,
    ),
    after_question_info_created_at_idx: index('after_question_info_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const comments = pgTable(
  'comments',
  {
    id: serial('id').primaryKey(),
    postId: integer('post_id_id').references(() => posts.id, {
      onDelete: 'set null',
    }),
    userId: integer('user_id_id').references(() => user.id, {
      onDelete: 'set null',
    }),
    content: varchar('content'),
    likes: numeric('likes').default('0'),
    dislikes: numeric('dislikes').default('0'),
    parentId: integer('parent_id_id').references((): AnyPgColumn => comments.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    comments_post_id_idx: index('comments_post_id_idx').on(columns.postId),
    comments_user_id_idx: index('comments_user_id_idx').on(columns.userId),
    comments_parent_id_idx: index('comments_parent_id_idx').on(columns.parentId),
    comments_updated_at_idx: index('comments_updated_at_idx').on(columns.updatedAt),
    comments_created_at_idx: index('comments_created_at_idx').on(columns.createdAt),
  }),
)

export const email_verifications = pgTable(
  'email_verifications',
  {
    id: serial('id').primaryKey(),
    userId: integer('user_id_id').references(() => user.id, {
      onDelete: 'set null',
    }),
    otp: varchar('otp'),
    expiresAt: timestamp('expires_at', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    email_verifications_user_id_idx: index('email_verifications_user_id_idx').on(columns.userId),
    email_verifications_updated_at_idx: index('email_verifications_updated_at_idx').on(
      columns.updatedAt,
    ),
    email_verifications_created_at_idx: index('email_verifications_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const information_slides_content = pgTable(
  'information_slides_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    paragraph: varchar('paragraph'),
  },
  (columns) => ({
    _orderIdx: index('information_slides_content_order_idx').on(columns._order),
    _parentIDIdx: index('information_slides_content_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [information_slides.id],
      name: 'information_slides_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const information_slides = pgTable(
  'information_slides',
  {
    id: serial('id').primaryKey(),
    heading: varchar('heading'),
    afterQuestionInfoId: integer('after_question_info_id_id').references(
      () => after_question_info.id,
      {
        onDelete: 'set null',
      },
    ),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    information_slides_after_question_info_id_idx: index(
      'information_slides_after_question_info_id_idx',
    ).on(columns.afterQuestionInfoId),
    information_slides_updated_at_idx: index('information_slides_updated_at_idx').on(
      columns.updatedAt,
    ),
    information_slides_created_at_idx: index('information_slides_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const media_links_src = pgTable(
  'media_links_src',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    url: varchar('url'),
  },
  (columns) => ({
    _orderIdx: index('media_links_src_order_idx').on(columns._order),
    _parentIDIdx: index('media_links_src_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [media_links.id],
      name: 'media_links_src_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const media_links = pgTable(
  'media_links',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt'),
    afterQuestionInfoId: integer('after_question_info_id_id').references(
      () => after_question_info.id,
      {
        onDelete: 'set null',
      },
    ),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    media_links_after_question_info_id_idx: index('media_links_after_question_info_id_idx').on(
      columns.afterQuestionInfoId,
    ),
    media_links_updated_at_idx: index('media_links_updated_at_idx').on(columns.updatedAt),
    media_links_created_at_idx: index('media_links_created_at_idx').on(columns.createdAt),
  }),
)

export const password_resets = pgTable(
  'password_resets',
  {
    id: serial('id').primaryKey(),
    userId: integer('user_id_id')
      .notNull()
      .references(() => user.id, {
        onDelete: 'set null',
      }),
    token: varchar('token').notNull(),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    password_resets_user_id_idx: index('password_resets_user_id_idx').on(columns.userId),
    password_resets_token_idx: uniqueIndex('password_resets_token_idx').on(columns.token),
    password_resets_updated_at_idx: index('password_resets_updated_at_idx').on(columns.updatedAt),
    password_resets_created_at_idx: index('password_resets_created_at_idx').on(columns.createdAt),
  }),
)

export const posts = pgTable(
  'posts',
  {
    id: serial('id').primaryKey(),
    userId: integer('user_id_id').references(() => user.id, {
      onDelete: 'set null',
    }),
    title: varchar('title'),
    question: varchar('question'),
    media: jsonb('media'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    posts_user_id_idx: index('posts_user_id_idx').on(columns.userId),
    posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
    posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
  }),
)

export const posts_rels = pgTable(
  'posts_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    tagsID: integer('tags_id'),
  },
  (columns) => ({
    order: index('posts_rels_order_idx').on(columns.order),
    parentIdx: index('posts_rels_parent_idx').on(columns.parent),
    pathIdx: index('posts_rels_path_idx').on(columns.path),
    posts_rels_tags_id_idx: index('posts_rels_tags_id_idx').on(columns.tagsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [posts.id],
      name: 'posts_rels_parent_fk',
    }).onDelete('cascade'),
    tagsIdFk: foreignKey({
      columns: [columns['tagsID']],
      foreignColumns: [tags.id],
      name: 'posts_rels_tags_fk',
    }).onDelete('cascade'),
  }),
)

export const puzzle_games = pgTable(
  'puzzle_games',
  {
    id: serial('id').primaryKey(),
    regionid: integer('regionid_id').references(() => regions.id, {
      onDelete: 'set null',
    }),
    gametype: integer('gametype_id').references(() => game_types.id, {
      onDelete: 'set null',
    }),
    imageurl: varchar('imageurl'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    puzzle_games_regionid_idx: index('puzzle_games_regionid_idx').on(columns.regionid),
    puzzle_games_gametype_idx: index('puzzle_games_gametype_idx').on(columns.gametype),
    puzzle_games_updated_at_idx: index('puzzle_games_updated_at_idx').on(columns.updatedAt),
    puzzle_games_created_at_idx: index('puzzle_games_created_at_idx').on(columns.createdAt),
  }),
)

export const puzzle_pieces = pgTable(
  'puzzle_pieces',
  {
    id: serial('id').primaryKey(),
    puzzleid: integer('puzzleid_id').references(() => puzzle_games.id, {
      onDelete: 'set null',
    }),
    piece_index: numeric('piece_index'),
    x_position: numeric('x_position'),
    y_position: numeric('y_position'),
    correct_x: numeric('correct_x'),
    correct_y: numeric('correct_y'),
    image_piece_url: varchar('image_piece_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    puzzle_pieces_puzzleid_idx: index('puzzle_pieces_puzzleid_idx').on(columns.puzzleid),
    puzzle_pieces_updated_at_idx: index('puzzle_pieces_updated_at_idx').on(columns.updatedAt),
    puzzle_pieces_created_at_idx: index('puzzle_pieces_created_at_idx').on(columns.createdAt),
  }),
)

export const quiz_games = pgTable(
  'quiz_games',
  {
    id: serial('id').primaryKey(),
    regionid: integer('regionid_id').references(() => regions.id, {
      onDelete: 'set null',
    }),
    gametype: integer('gametype_id').references(() => game_types.id, {
      onDelete: 'set null',
    }),
    title: varchar('title'),
    description: varchar('description'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    quiz_games_regionid_idx: index('quiz_games_regionid_idx').on(columns.regionid),
    quiz_games_gametype_idx: index('quiz_games_gametype_idx').on(columns.gametype),
    quiz_games_updated_at_idx: index('quiz_games_updated_at_idx').on(columns.updatedAt),
    quiz_games_created_at_idx: index('quiz_games_created_at_idx').on(columns.createdAt),
  }),
)

export const quiz_game_questions = pgTable(
  'quiz_game_questions',
  {
    id: serial('id').primaryKey(),
    quiz_game_id: integer('quiz_game_id_id').references(() => quiz_games.id, {
      onDelete: 'set null',
    }),
    question: varchar('question'),
    optionA: varchar('option_a'),
    optionB: varchar('option_b'),
    optionC: varchar('option_c'),
    optionD: varchar('option_d'),
    correctAnswer: varchar('correct_answer'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    quiz_game_questions_quiz_game_id_idx: index('quiz_game_questions_quiz_game_id_idx').on(
      columns.quiz_game_id,
    ),
    quiz_game_questions_updated_at_idx: index('quiz_game_questions_updated_at_idx').on(
      columns.updatedAt,
    ),
    quiz_game_questions_created_at_idx: index('quiz_game_questions_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const refresh_tokens = pgTable(
  'refresh_tokens',
  {
    id: serial('id').primaryKey(),
    userId: integer('user_id_id')
      .notNull()
      .references(() => user.id, {
        onDelete: 'set null',
      }),
    hashedToken: varchar('hashed_token').notNull(),
    revoked: boolean('revoked').default(false),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    expireAt: timestamp('expire_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    refresh_tokens_user_id_idx: index('refresh_tokens_user_id_idx').on(columns.userId),
    refresh_tokens_hashed_token_idx: uniqueIndex('refresh_tokens_hashed_token_idx').on(
      columns.hashedToken,
    ),
  }),
)

export const regions = pgTable(
  'regions',
  {
    id: serial('id').primaryKey(),
    regionName: varchar('region_name').notNull(),
    regionCode: varchar('region_code').notNull(),
    mediaUrl: varchar('media_url'),
    description: varchar('description'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    regions_region_code_idx: uniqueIndex('regions_region_code_idx').on(columns.regionCode),
    regions_updated_at_idx: index('regions_updated_at_idx').on(columns.updatedAt),
    regions_created_at_idx: index('regions_created_at_idx').on(columns.createdAt),
  }),
)

export const tags = pgTable(
  'tags',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    tags_name_idx: uniqueIndex('tags_name_idx').on(columns.name),
    tags_updated_at_idx: index('tags_updated_at_idx').on(columns.updatedAt),
    tags_created_at_idx: index('tags_created_at_idx').on(columns.createdAt),
  }),
)

export const treasure_cards = pgTable(
  'treasure_cards',
  {
    id: serial('id').primaryKey(),
    treasureGame: integer('treasure_game_id')
      .notNull()
      .references(() => treasure_games.id, {
        onDelete: 'set null',
      }),
    type: enum_treasure_cards_type('type').notNull(),
    value: varchar('value').notNull(),
    matchGroup: numeric('match_group').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    treasure_cards_treasure_game_idx: index('treasure_cards_treasure_game_idx').on(
      columns.treasureGame,
    ),
    treasure_cards_updated_at_idx: index('treasure_cards_updated_at_idx').on(columns.updatedAt),
    treasure_cards_created_at_idx: index('treasure_cards_created_at_idx').on(columns.createdAt),
  }),
)

export const treasure_games = pgTable(
  'treasure_games',
  {
    id: serial('id').primaryKey(),
    region: integer('region_id').references(() => regions.id, {
      onDelete: 'set null',
    }),
    gametype: numeric('gametype').default('2'),
    title: varchar('title'),
    description: varchar('description'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    treasure_games_region_idx: index('treasure_games_region_idx').on(columns.region),
    treasure_games_updated_at_idx: index('treasure_games_updated_at_idx').on(columns.updatedAt),
    treasure_games_created_at_idx: index('treasure_games_created_at_idx').on(columns.createdAt),
  }),
)

export const word_games_correct_letters = pgTable(
  'word_games_correct_letters',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    letter: varchar('letter'),
  },
  (columns) => ({
    _orderIdx: index('word_games_correct_letters_order_idx').on(columns._order),
    _parentIDIdx: index('word_games_correct_letters_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [word_games.id],
      name: 'word_games_correct_letters_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const word_games_letters = pgTable(
  'word_games_letters',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    letter: varchar('letter'),
  },
  (columns) => ({
    _orderIdx: index('word_games_letters_order_idx').on(columns._order),
    _parentIDIdx: index('word_games_letters_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [word_games.id],
      name: 'word_games_letters_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const word_games = pgTable(
  'word_games',
  {
    id: serial('id').primaryKey(),
    region: integer('region_id').references(() => regions.id, {
      onDelete: 'set null',
    }),
    gametype: numeric('gametype').default('3'),
    question: varchar('question').notNull(),
    hint: varchar('hint'),
    answer: varchar('answer').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    word_games_region_idx: index('word_games_region_idx').on(columns.region),
    word_games_updated_at_idx: index('word_games_updated_at_idx').on(columns.updatedAt),
    word_games_created_at_idx: index('word_games_created_at_idx').on(columns.createdAt),
  }),
)

export const comment_reactions = pgTable(
  'comment_reactions',
  {
    id: serial('id').primaryKey(),
    user: integer('user_id')
      .notNull()
      .references(() => user.id, {
        onDelete: 'set null',
      }),
    comment: integer('comment_id')
      .notNull()
      .references(() => comments.id, {
        onDelete: 'set null',
      }),
    reactionType: enum_comment_reactions_reaction_type('reaction_type').notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    comment_reactions_user_idx: index('comment_reactions_user_idx').on(columns.user),
    comment_reactions_comment_idx: index('comment_reactions_comment_idx').on(columns.comment),
    comment_reactions_updated_at_idx: index('comment_reactions_updated_at_idx').on(
      columns.updatedAt,
    ),
  }),
)

export const game_types = pgTable(
  'game_types',
  {
    id: serial('id').primaryKey(),
    code: enum_game_types_code('code').notNull(),
    name: varchar('name').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    game_types_updated_at_idx: index('game_types_updated_at_idx').on(columns.updatedAt),
    game_types_created_at_idx: index('game_types_created_at_idx').on(columns.createdAt),
  }),
)

export const user = pgTable(
  'user',
  {
    id: serial('id').primaryKey(),
    full_name: varchar('full_name').notNull(),
    username: varchar('username'),
    avatarUrl: varchar('avatar_url').default('https://example.com/default-avatar.png'),
    dateOfBirth: timestamp('date_of_birth', { mode: 'string', withTimezone: true, precision: 3 }),
    location: varchar('location'),
    gender: enum_user_gender('gender'),
    isVerified: boolean('is_verified').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    user_username_idx: uniqueIndex('user_username_idx').on(columns.username),
    user_updated_at_idx: index('user_updated_at_idx').on(columns.updatedAt),
    user_created_at_idx: index('user_created_at_idx').on(columns.createdAt),
    user_email_idx: uniqueIndex('user_email_idx').on(columns.email),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    achievementsID: integer('achievements_id'),
    'after-question-infoID': integer('after_question_info_id'),
    commentsID: integer('comments_id'),
    'email-verificationsID': integer('email_verifications_id'),
    'information-slidesID': integer('information_slides_id'),
    'media-linksID': integer('media_links_id'),
    'password-resetsID': integer('password_resets_id'),
    postsID: integer('posts_id'),
    'puzzle-gamesID': integer('puzzle_games_id'),
    'puzzle-piecesID': integer('puzzle_pieces_id'),
    'quiz-gamesID': integer('quiz_games_id'),
    'quiz-game-questionsID': integer('quiz_game_questions_id'),
    'refresh-tokensID': integer('refresh_tokens_id'),
    regionsID: integer('regions_id'),
    tagsID: integer('tags_id'),
    'treasure-cardsID': integer('treasure_cards_id'),
    'treasure-gamesID': integer('treasure_games_id'),
    'word-gamesID': integer('word_games_id'),
    'comment-reactionsID': integer('comment_reactions_id'),
    'game-typesID': integer('game_types_id'),
    userID: integer('user_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_achievements_id_idx: index(
      'payload_locked_documents_rels_achievements_id_idx',
    ).on(columns.achievementsID),
    payload_locked_documents_rels_after_question_info_id_idx: index(
      'payload_locked_documents_rels_after_question_info_id_idx',
    ).on(columns['after-question-infoID']),
    payload_locked_documents_rels_comments_id_idx: index(
      'payload_locked_documents_rels_comments_id_idx',
    ).on(columns.commentsID),
    payload_locked_documents_rels_email_verifications_id_idx: index(
      'payload_locked_documents_rels_email_verifications_id_idx',
    ).on(columns['email-verificationsID']),
    payload_locked_documents_rels_information_slides_id_idx: index(
      'payload_locked_documents_rels_information_slides_id_idx',
    ).on(columns['information-slidesID']),
    payload_locked_documents_rels_media_links_id_idx: index(
      'payload_locked_documents_rels_media_links_id_idx',
    ).on(columns['media-linksID']),
    payload_locked_documents_rels_password_resets_id_idx: index(
      'payload_locked_documents_rels_password_resets_id_idx',
    ).on(columns['password-resetsID']),
    payload_locked_documents_rels_posts_id_idx: index(
      'payload_locked_documents_rels_posts_id_idx',
    ).on(columns.postsID),
    payload_locked_documents_rels_puzzle_games_id_idx: index(
      'payload_locked_documents_rels_puzzle_games_id_idx',
    ).on(columns['puzzle-gamesID']),
    payload_locked_documents_rels_puzzle_pieces_id_idx: index(
      'payload_locked_documents_rels_puzzle_pieces_id_idx',
    ).on(columns['puzzle-piecesID']),
    payload_locked_documents_rels_quiz_games_id_idx: index(
      'payload_locked_documents_rels_quiz_games_id_idx',
    ).on(columns['quiz-gamesID']),
    payload_locked_documents_rels_quiz_game_questions_id_idx: index(
      'payload_locked_documents_rels_quiz_game_questions_id_idx',
    ).on(columns['quiz-game-questionsID']),
    payload_locked_documents_rels_refresh_tokens_id_idx: index(
      'payload_locked_documents_rels_refresh_tokens_id_idx',
    ).on(columns['refresh-tokensID']),
    payload_locked_documents_rels_regions_id_idx: index(
      'payload_locked_documents_rels_regions_id_idx',
    ).on(columns.regionsID),
    payload_locked_documents_rels_tags_id_idx: index(
      'payload_locked_documents_rels_tags_id_idx',
    ).on(columns.tagsID),
    payload_locked_documents_rels_treasure_cards_id_idx: index(
      'payload_locked_documents_rels_treasure_cards_id_idx',
    ).on(columns['treasure-cardsID']),
    payload_locked_documents_rels_treasure_games_id_idx: index(
      'payload_locked_documents_rels_treasure_games_id_idx',
    ).on(columns['treasure-gamesID']),
    payload_locked_documents_rels_word_games_id_idx: index(
      'payload_locked_documents_rels_word_games_id_idx',
    ).on(columns['word-gamesID']),
    payload_locked_documents_rels_comment_reactions_id_idx: index(
      'payload_locked_documents_rels_comment_reactions_id_idx',
    ).on(columns['comment-reactionsID']),
    payload_locked_documents_rels_game_types_id_idx: index(
      'payload_locked_documents_rels_game_types_id_idx',
    ).on(columns['game-typesID']),
    payload_locked_documents_rels_user_id_idx: index(
      'payload_locked_documents_rels_user_id_idx',
    ).on(columns.userID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    achievementsIdFk: foreignKey({
      columns: [columns['achievementsID']],
      foreignColumns: [achievements.id],
      name: 'payload_locked_documents_rels_achievements_fk',
    }).onDelete('cascade'),
    'after-question-infoIdFk': foreignKey({
      columns: [columns['after-question-infoID']],
      foreignColumns: [after_question_info.id],
      name: 'payload_locked_documents_rels_after_question_info_fk',
    }).onDelete('cascade'),
    commentsIdFk: foreignKey({
      columns: [columns['commentsID']],
      foreignColumns: [comments.id],
      name: 'payload_locked_documents_rels_comments_fk',
    }).onDelete('cascade'),
    'email-verificationsIdFk': foreignKey({
      columns: [columns['email-verificationsID']],
      foreignColumns: [email_verifications.id],
      name: 'payload_locked_documents_rels_email_verifications_fk',
    }).onDelete('cascade'),
    'information-slidesIdFk': foreignKey({
      columns: [columns['information-slidesID']],
      foreignColumns: [information_slides.id],
      name: 'payload_locked_documents_rels_information_slides_fk',
    }).onDelete('cascade'),
    'media-linksIdFk': foreignKey({
      columns: [columns['media-linksID']],
      foreignColumns: [media_links.id],
      name: 'payload_locked_documents_rels_media_links_fk',
    }).onDelete('cascade'),
    'password-resetsIdFk': foreignKey({
      columns: [columns['password-resetsID']],
      foreignColumns: [password_resets.id],
      name: 'payload_locked_documents_rels_password_resets_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'payload_locked_documents_rels_posts_fk',
    }).onDelete('cascade'),
    'puzzle-gamesIdFk': foreignKey({
      columns: [columns['puzzle-gamesID']],
      foreignColumns: [puzzle_games.id],
      name: 'payload_locked_documents_rels_puzzle_games_fk',
    }).onDelete('cascade'),
    'puzzle-piecesIdFk': foreignKey({
      columns: [columns['puzzle-piecesID']],
      foreignColumns: [puzzle_pieces.id],
      name: 'payload_locked_documents_rels_puzzle_pieces_fk',
    }).onDelete('cascade'),
    'quiz-gamesIdFk': foreignKey({
      columns: [columns['quiz-gamesID']],
      foreignColumns: [quiz_games.id],
      name: 'payload_locked_documents_rels_quiz_games_fk',
    }).onDelete('cascade'),
    'quiz-game-questionsIdFk': foreignKey({
      columns: [columns['quiz-game-questionsID']],
      foreignColumns: [quiz_game_questions.id],
      name: 'payload_locked_documents_rels_quiz_game_questions_fk',
    }).onDelete('cascade'),
    'refresh-tokensIdFk': foreignKey({
      columns: [columns['refresh-tokensID']],
      foreignColumns: [refresh_tokens.id],
      name: 'payload_locked_documents_rels_refresh_tokens_fk',
    }).onDelete('cascade'),
    regionsIdFk: foreignKey({
      columns: [columns['regionsID']],
      foreignColumns: [regions.id],
      name: 'payload_locked_documents_rels_regions_fk',
    }).onDelete('cascade'),
    tagsIdFk: foreignKey({
      columns: [columns['tagsID']],
      foreignColumns: [tags.id],
      name: 'payload_locked_documents_rels_tags_fk',
    }).onDelete('cascade'),
    'treasure-cardsIdFk': foreignKey({
      columns: [columns['treasure-cardsID']],
      foreignColumns: [treasure_cards.id],
      name: 'payload_locked_documents_rels_treasure_cards_fk',
    }).onDelete('cascade'),
    'treasure-gamesIdFk': foreignKey({
      columns: [columns['treasure-gamesID']],
      foreignColumns: [treasure_games.id],
      name: 'payload_locked_documents_rels_treasure_games_fk',
    }).onDelete('cascade'),
    'word-gamesIdFk': foreignKey({
      columns: [columns['word-gamesID']],
      foreignColumns: [word_games.id],
      name: 'payload_locked_documents_rels_word_games_fk',
    }).onDelete('cascade'),
    'comment-reactionsIdFk': foreignKey({
      columns: [columns['comment-reactionsID']],
      foreignColumns: [comment_reactions.id],
      name: 'payload_locked_documents_rels_comment_reactions_fk',
    }).onDelete('cascade'),
    'game-typesIdFk': foreignKey({
      columns: [columns['game-typesID']],
      foreignColumns: [game_types.id],
      name: 'payload_locked_documents_rels_game_types_fk',
    }).onDelete('cascade'),
    userIdFk: foreignKey({
      columns: [columns['userID']],
      foreignColumns: [user.id],
      name: 'payload_locked_documents_rels_user_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    userID: integer('user_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    payload_preferences_rels_user_id_idx: index('payload_preferences_rels_user_id_idx').on(
      columns.userID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
    userIdFk: foreignKey({
      columns: [columns['userID']],
      foreignColumns: [user.id],
      name: 'payload_preferences_rels_user_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_users = relations(users, () => ({}))
export const relations_media = relations(media, () => ({}))
export const relations_achievements = relations(achievements, ({ one }) => ({
  userId: one(user, {
    fields: [achievements.userId],
    references: [user.id],
    relationName: 'userId',
  }),
}))
export const relations_after_question_info = relations(after_question_info, ({ one }) => ({
  puzzleGameId: one(puzzle_games, {
    fields: [after_question_info.puzzleGameId],
    references: [puzzle_games.id],
    relationName: 'puzzleGameId',
  }),
  quizGameId: one(quiz_games, {
    fields: [after_question_info.quizGameId],
    references: [quiz_games.id],
    relationName: 'quizGameId',
  }),
  treasureGameId: one(treasure_games, {
    fields: [after_question_info.treasureGameId],
    references: [treasure_games.id],
    relationName: 'treasureGameId',
  }),
  wordGameId: one(word_games, {
    fields: [after_question_info.wordGameId],
    references: [word_games.id],
    relationName: 'wordGameId',
  }),
  gameTypeId: one(game_types, {
    fields: [after_question_info.gameTypeId],
    references: [game_types.id],
    relationName: 'gameTypeId',
  }),
}))
export const relations_comments = relations(comments, ({ one }) => ({
  postId: one(posts, {
    fields: [comments.postId],
    references: [posts.id],
    relationName: 'postId',
  }),
  userId: one(user, {
    fields: [comments.userId],
    references: [user.id],
    relationName: 'userId',
  }),
  parentId: one(comments, {
    fields: [comments.parentId],
    references: [comments.id],
    relationName: 'parentId',
  }),
}))
export const relations_email_verifications = relations(email_verifications, ({ one }) => ({
  userId: one(user, {
    fields: [email_verifications.userId],
    references: [user.id],
    relationName: 'userId',
  }),
}))
export const relations_information_slides_content = relations(
  information_slides_content,
  ({ one }) => ({
    _parentID: one(information_slides, {
      fields: [information_slides_content._parentID],
      references: [information_slides.id],
      relationName: 'content',
    }),
  }),
)
export const relations_information_slides = relations(information_slides, ({ one, many }) => ({
  content: many(information_slides_content, {
    relationName: 'content',
  }),
  afterQuestionInfoId: one(after_question_info, {
    fields: [information_slides.afterQuestionInfoId],
    references: [after_question_info.id],
    relationName: 'afterQuestionInfoId',
  }),
}))
export const relations_media_links_src = relations(media_links_src, ({ one }) => ({
  _parentID: one(media_links, {
    fields: [media_links_src._parentID],
    references: [media_links.id],
    relationName: 'src',
  }),
}))
export const relations_media_links = relations(media_links, ({ one, many }) => ({
  src: many(media_links_src, {
    relationName: 'src',
  }),
  afterQuestionInfoId: one(after_question_info, {
    fields: [media_links.afterQuestionInfoId],
    references: [after_question_info.id],
    relationName: 'afterQuestionInfoId',
  }),
}))
export const relations_password_resets = relations(password_resets, ({ one }) => ({
  userId: one(user, {
    fields: [password_resets.userId],
    references: [user.id],
    relationName: 'userId',
  }),
}))
export const relations_posts_rels = relations(posts_rels, ({ one }) => ({
  parent: one(posts, {
    fields: [posts_rels.parent],
    references: [posts.id],
    relationName: '_rels',
  }),
  tagsID: one(tags, {
    fields: [posts_rels.tagsID],
    references: [tags.id],
    relationName: 'tags',
  }),
}))
export const relations_posts = relations(posts, ({ one, many }) => ({
  userId: one(user, {
    fields: [posts.userId],
    references: [user.id],
    relationName: 'userId',
  }),
  _rels: many(posts_rels, {
    relationName: '_rels',
  }),
}))
export const relations_puzzle_games = relations(puzzle_games, ({ one }) => ({
  regionid: one(regions, {
    fields: [puzzle_games.regionid],
    references: [regions.id],
    relationName: 'regionid',
  }),
  gametype: one(game_types, {
    fields: [puzzle_games.gametype],
    references: [game_types.id],
    relationName: 'gametype',
  }),
}))
export const relations_puzzle_pieces = relations(puzzle_pieces, ({ one }) => ({
  puzzleid: one(puzzle_games, {
    fields: [puzzle_pieces.puzzleid],
    references: [puzzle_games.id],
    relationName: 'puzzleid',
  }),
}))
export const relations_quiz_games = relations(quiz_games, ({ one }) => ({
  regionid: one(regions, {
    fields: [quiz_games.regionid],
    references: [regions.id],
    relationName: 'regionid',
  }),
  gametype: one(game_types, {
    fields: [quiz_games.gametype],
    references: [game_types.id],
    relationName: 'gametype',
  }),
}))
export const relations_quiz_game_questions = relations(quiz_game_questions, ({ one }) => ({
  quiz_game_id: one(quiz_games, {
    fields: [quiz_game_questions.quiz_game_id],
    references: [quiz_games.id],
    relationName: 'quiz_game_id',
  }),
}))
export const relations_refresh_tokens = relations(refresh_tokens, ({ one }) => ({
  userId: one(user, {
    fields: [refresh_tokens.userId],
    references: [user.id],
    relationName: 'userId',
  }),
}))
export const relations_regions = relations(regions, () => ({}))
export const relations_tags = relations(tags, () => ({}))
export const relations_treasure_cards = relations(treasure_cards, ({ one }) => ({
  treasureGame: one(treasure_games, {
    fields: [treasure_cards.treasureGame],
    references: [treasure_games.id],
    relationName: 'treasureGame',
  }),
}))
export const relations_treasure_games = relations(treasure_games, ({ one }) => ({
  region: one(regions, {
    fields: [treasure_games.region],
    references: [regions.id],
    relationName: 'region',
  }),
}))
export const relations_word_games_correct_letters = relations(
  word_games_correct_letters,
  ({ one }) => ({
    _parentID: one(word_games, {
      fields: [word_games_correct_letters._parentID],
      references: [word_games.id],
      relationName: 'correctLetters',
    }),
  }),
)
export const relations_word_games_letters = relations(word_games_letters, ({ one }) => ({
  _parentID: one(word_games, {
    fields: [word_games_letters._parentID],
    references: [word_games.id],
    relationName: 'letters',
  }),
}))
export const relations_word_games = relations(word_games, ({ one, many }) => ({
  region: one(regions, {
    fields: [word_games.region],
    references: [regions.id],
    relationName: 'region',
  }),
  correctLetters: many(word_games_correct_letters, {
    relationName: 'correctLetters',
  }),
  letters: many(word_games_letters, {
    relationName: 'letters',
  }),
}))
export const relations_comment_reactions = relations(comment_reactions, ({ one }) => ({
  user: one(user, {
    fields: [comment_reactions.user],
    references: [user.id],
    relationName: 'user',
  }),
  comment: one(comments, {
    fields: [comment_reactions.comment],
    references: [comments.id],
    relationName: 'comment',
  }),
}))
export const relations_game_types = relations(game_types, () => ({}))
export const relations_user = relations(user, () => ({}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    achievementsID: one(achievements, {
      fields: [payload_locked_documents_rels.achievementsID],
      references: [achievements.id],
      relationName: 'achievements',
    }),
    'after-question-infoID': one(after_question_info, {
      fields: [payload_locked_documents_rels['after-question-infoID']],
      references: [after_question_info.id],
      relationName: 'after-question-info',
    }),
    commentsID: one(comments, {
      fields: [payload_locked_documents_rels.commentsID],
      references: [comments.id],
      relationName: 'comments',
    }),
    'email-verificationsID': one(email_verifications, {
      fields: [payload_locked_documents_rels['email-verificationsID']],
      references: [email_verifications.id],
      relationName: 'email-verifications',
    }),
    'information-slidesID': one(information_slides, {
      fields: [payload_locked_documents_rels['information-slidesID']],
      references: [information_slides.id],
      relationName: 'information-slides',
    }),
    'media-linksID': one(media_links, {
      fields: [payload_locked_documents_rels['media-linksID']],
      references: [media_links.id],
      relationName: 'media-links',
    }),
    'password-resetsID': one(password_resets, {
      fields: [payload_locked_documents_rels['password-resetsID']],
      references: [password_resets.id],
      relationName: 'password-resets',
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: 'posts',
    }),
    'puzzle-gamesID': one(puzzle_games, {
      fields: [payload_locked_documents_rels['puzzle-gamesID']],
      references: [puzzle_games.id],
      relationName: 'puzzle-games',
    }),
    'puzzle-piecesID': one(puzzle_pieces, {
      fields: [payload_locked_documents_rels['puzzle-piecesID']],
      references: [puzzle_pieces.id],
      relationName: 'puzzle-pieces',
    }),
    'quiz-gamesID': one(quiz_games, {
      fields: [payload_locked_documents_rels['quiz-gamesID']],
      references: [quiz_games.id],
      relationName: 'quiz-games',
    }),
    'quiz-game-questionsID': one(quiz_game_questions, {
      fields: [payload_locked_documents_rels['quiz-game-questionsID']],
      references: [quiz_game_questions.id],
      relationName: 'quiz-game-questions',
    }),
    'refresh-tokensID': one(refresh_tokens, {
      fields: [payload_locked_documents_rels['refresh-tokensID']],
      references: [refresh_tokens.id],
      relationName: 'refresh-tokens',
    }),
    regionsID: one(regions, {
      fields: [payload_locked_documents_rels.regionsID],
      references: [regions.id],
      relationName: 'regions',
    }),
    tagsID: one(tags, {
      fields: [payload_locked_documents_rels.tagsID],
      references: [tags.id],
      relationName: 'tags',
    }),
    'treasure-cardsID': one(treasure_cards, {
      fields: [payload_locked_documents_rels['treasure-cardsID']],
      references: [treasure_cards.id],
      relationName: 'treasure-cards',
    }),
    'treasure-gamesID': one(treasure_games, {
      fields: [payload_locked_documents_rels['treasure-gamesID']],
      references: [treasure_games.id],
      relationName: 'treasure-games',
    }),
    'word-gamesID': one(word_games, {
      fields: [payload_locked_documents_rels['word-gamesID']],
      references: [word_games.id],
      relationName: 'word-games',
    }),
    'comment-reactionsID': one(comment_reactions, {
      fields: [payload_locked_documents_rels['comment-reactionsID']],
      references: [comment_reactions.id],
      relationName: 'comment-reactions',
    }),
    'game-typesID': one(game_types, {
      fields: [payload_locked_documents_rels['game-typesID']],
      references: [game_types.id],
      relationName: 'game-types',
    }),
    userID: one(user, {
      fields: [payload_locked_documents_rels.userID],
      references: [user.id],
      relationName: 'user',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    userID: one(user, {
      fields: [payload_preferences_rels.userID],
      references: [user.id],
      relationName: 'user',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  enum_treasure_cards_type: typeof enum_treasure_cards_type
  enum_comment_reactions_reaction_type: typeof enum_comment_reactions_reaction_type
  enum_game_types_code: typeof enum_game_types_code
  enum_user_gender: typeof enum_user_gender
  users: typeof users
  media: typeof media
  achievements: typeof achievements
  after_question_info: typeof after_question_info
  comments: typeof comments
  email_verifications: typeof email_verifications
  information_slides_content: typeof information_slides_content
  information_slides: typeof information_slides
  media_links_src: typeof media_links_src
  media_links: typeof media_links
  password_resets: typeof password_resets
  posts: typeof posts
  posts_rels: typeof posts_rels
  puzzle_games: typeof puzzle_games
  puzzle_pieces: typeof puzzle_pieces
  quiz_games: typeof quiz_games
  quiz_game_questions: typeof quiz_game_questions
  refresh_tokens: typeof refresh_tokens
  regions: typeof regions
  tags: typeof tags
  treasure_cards: typeof treasure_cards
  treasure_games: typeof treasure_games
  word_games_correct_letters: typeof word_games_correct_letters
  word_games_letters: typeof word_games_letters
  word_games: typeof word_games
  comment_reactions: typeof comment_reactions
  game_types: typeof game_types
  user: typeof user
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_achievements: typeof relations_achievements
  relations_after_question_info: typeof relations_after_question_info
  relations_comments: typeof relations_comments
  relations_email_verifications: typeof relations_email_verifications
  relations_information_slides_content: typeof relations_information_slides_content
  relations_information_slides: typeof relations_information_slides
  relations_media_links_src: typeof relations_media_links_src
  relations_media_links: typeof relations_media_links
  relations_password_resets: typeof relations_password_resets
  relations_posts_rels: typeof relations_posts_rels
  relations_posts: typeof relations_posts
  relations_puzzle_games: typeof relations_puzzle_games
  relations_puzzle_pieces: typeof relations_puzzle_pieces
  relations_quiz_games: typeof relations_quiz_games
  relations_quiz_game_questions: typeof relations_quiz_game_questions
  relations_refresh_tokens: typeof relations_refresh_tokens
  relations_regions: typeof relations_regions
  relations_tags: typeof relations_tags
  relations_treasure_cards: typeof relations_treasure_cards
  relations_treasure_games: typeof relations_treasure_games
  relations_word_games_correct_letters: typeof relations_word_games_correct_letters
  relations_word_games_letters: typeof relations_word_games_letters
  relations_word_games: typeof relations_word_games
  relations_comment_reactions: typeof relations_comment_reactions
  relations_game_types: typeof relations_game_types
  relations_user: typeof relations_user
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-postgres/types' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
